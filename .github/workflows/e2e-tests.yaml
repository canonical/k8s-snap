name: Run e2e tests

permissions:
  contents: read

on:
  workflow_call:
    inputs:
      arch:
        description: Job runner architecture (amd64 or arm64)
        default: amd64
        type: string
      os:
        description: LXD image to use when running e2e tests
        default: ubuntu:24.04
        type: string
      # Download k8s-snap using either a GH action artifact or a snap channel.
      artifact:
        description: The name of a GH action artifact
        type: string
      channel:
        description: k8s snap channel
        type: string
      test-tags:
        description: Integration test filter tags (e.g. pull_request, up_to_weekly)
        default: pull_request
        type: string
      flavor:
        description: Test flavor (e.g. moonray or strict), leave empty for classic
        default: ""
        type: string
      extra-test-args:
        description: |
          Additional pytest arguments, use "-k <test_name>" to run a specific test
        default: ""
        type: string
  workflow_dispatch:
    inputs:
      arch:
        description: Job runner architecture (amd64 or arm64)
        default: amd64
        type: string
      os:
        description: LXD image to use when running e2e tests
        default: ubuntu:24.04
        type: string
      channel:
        description: k8s snap channel
        type: string
        default: latest/edge
      test-tags:
        description: Integration test filter tags (e.g. pull_request, up_to_weekly)
        default: pull_request
        type: string
      flavor:
        description: Test flavor (e.g. moonray or strict). Leave empty for classic
        default: ""
        type: string
      extra-test-args:
        description: Additional pytest arguments
        default: ""
        type: string
      tmate_enabled:
        type: boolean
        description: Start a tmate session before running the tests
        required: false
        default: false

jobs:
  prepare:
    name: Prepare Environment
    runs-on: ${{ inputs.arch == 'arm64' && 'ubuntu-24.04-arm' || 'ubuntu-24.04' }}
    outputs:
      tests: ${{ steps.collect-tests.outputs.tests }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install tox
        run: sudo apt-get install -y tox
      - name: Collect tests
        id: collect-tests
        run: |
          cd tests/integration
          # Split the input tags into an array and pass them as individual args
          IFS=' ' read -ra TAGS <<< "${{ inputs.test-tags }}"
          TAGS_ARGS=""
          for tag in "${TAGS[@]}"; do
            TAGS_ARGS="$TAGS_ARGS --tags $tag"
          done

          # Collect test names and convert to JSON array for GitHub Actions
          # There is no easy way to get the test names from pytest, so we use the --collect-only flag
          # and parse the output to extract the test names.
          TEST_FILES=$(tox -e integration -- --collect-only $TAGS_ARGS --quiet --no-header tests/ | grep ::)

          # Convert to JSON array for GitHub Actions
          JSON_ARRAY=$(echo "$TEST_FILES" | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "tests=$JSON_ARRAY" >> $GITHUB_OUTPUT
          echo "Found test files: $TEST_FILES"

  run-tests:
    name: ${{ matrix.test }}
    needs: prepare
    runs-on: ${{ inputs.arch == 'arm64' && 'ubuntu-24.04-arm' || 'ubuntu-24.04' }}
    strategy:
      fail-fast: false
      matrix:
        test: ${{ fromJson(needs.prepare.outputs.tests) }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Download k8s-snap
        id: download-snap
        uses: ./.github/actions/download-k8s-snap
        with:
          channel: ${{ inputs.channel }}
          artifact: ${{ inputs.artifact }}
      - name: Setup LXD
        uses: canonical/setup-lxd@v0.1.3
        with:
          bridges: "lxdbr0,dualstack-br0,ipv6-br0"
      - name: Install tox
        run: sudo apt-get install -y tox
      - name: Setup tmate session
        uses: canonical/action-tmate@main
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.tmate_enabled }}
      - name: Generate names for step and artifacts
        run: |
          FULL_TEST_NODE_ID="${{ matrix.test }}"
          # Extract short test name (part after '::') for the step display name
          SHORT_TEST_NAME="${FULL_TEST_NODE_ID##*::}"
          echo "short_test_name=${SHORT_TEST_NAME}" >> $GITHUB_ENV

          # Generate long, unique, sanitized name for artifacts and directories (existing logic)
          RAW_ARTIFACT_NAME_BASE="${{ inputs.os }}-${{ inputs.arch }}-${FULL_TEST_NODE_ID}-$(uuidgen)"
          SANITIZED_ARTIFACT_NAME=$(echo "$RAW_ARTIFACT_NAME_BASE" | sed 's/[\/:\.\]/-/g' | sed 's/\s//g')
          echo "test_name=${SANITIZED_ARTIFACT_NAME}" >> $GITHUB_ENV
      - name: ${{ env.short_test_name }}
        env:
          TEST_SNAP: ${{ steps.download-snap.outputs.snap-path }}
          TEST_SUBSTRATE: lxd
          TEST_LXD_IMAGE: ${{ inputs.os }}
          TEST_FLAVOR: ${{ inputs.flavor }}
          TEST_INSPECTION_REPORTS_DIR: ${{ github.workspace }}/inspection-reports/${{ env.test_name }}
          TEST_VERSION_UPGRADE_CHANNELS: "recent 6"
          # TODO(etienne): change to "recent" when 1.33 is stable
          TEST_VERSION_DOWNGRADE_CHANNELS: "1.32-classic/stable 1.32-classic/beta 1.31-classic/stable 1.31-classic/beta"
          TEST_VERSION_UPGRADE_MIN_RELEASE: "1.32"
          TEST_STRICT_INTERFACE_CHANNELS: "recent 6 strict"
          TEST_MIRROR_LIST: '[{"name": "ghcr.io", "port": 5000, "remote": "https://ghcr.io", "username": "${{ github.actor }}", "password": "${{ secrets.GITHUB_TOKEN }}"}, {"name": "docker.io", "port": 5001, "remote": "https://registry-1.docker.io", "username": "", "password": ""}, {"name": "rocks.canonical.com", "port": 5002, "remote": "https://rocks.canonical.com/cdk"}]'
          TEST_GH_REF: ${{ github.ref_name }}
          TEST_GH_BASE_REF: ${{ github.base_ref }}
        run: |
          cd tests/integration && sudo --user "$USER" --preserve-env --preserve-env=PATH -- env -- tox -e integration -- ${{ inputs.extra-test-args }} ${{ matrix.test }}
      - name: Prepare inspection reports
        if: failure()
        run: |
          mkdir -p inspection-report-archives
          tar -czvf inspection-report-archives/${{ env.test_name }}.tar.gz -C ${{ github.workspace }} inspection-reports/${{ env.test_name }} || true
      - name: Upload inspection report artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: inspection-reports-${{ env.test_name }}
          path: ${{ github.workspace }}/inspection-report-archives/${{ env.test_name }}.tar.gz
      - name: Upload CNCF conformance report artifact
        if: ${{ failure() && contains(inputs.test-tags, 'conformance_tests') }}
        uses: actions/upload-artifact@v4
        with:
          name: sonobuoy-e2e-${{ env.test_name }}
          path: tests/integration/sonobuoy_e2e.tar.gz
      - name: Generate HTML test report
        if: ${{ contains(inputs.extra-test-args, '--subunit-path') }}
        run: |
          cd tests/integration
          if [ -f subunit.out ]; then
            subunit2html subunit.out subunit.html
          fi

      - name: Upload html test report
        if: ${{ failure() && contains(inputs.extra-test-args, '--subunit-path') }}
        uses: actions/upload-artifact@v4
        with:
          name: subunit-${{ env.test_name }}.html
          path: tests/integration/subunit.html
