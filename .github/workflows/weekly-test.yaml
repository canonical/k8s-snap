name: Weekly

on:
  schedule:
    - cron: "0 0 * * 6" # Runs every saturday at midnight
  pull_request:
    paths:
      - .github/workflows/weekly-test.yaml

permissions:
  contents: read
  actions: read

jobs:
  prepare:
    name: Prepare Environment
    runs-on: ubuntu-latest
    outputs:
      cloud-init: ${{ steps.cloud-init.outputs.cloud-init }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y tox jq
      - name: Generate cloud-init
        id: cloud-init
        env:
          UBUNTU_PRO_TOKEN: ${{ secrets.UBUNTU_PRO_TOKEN }}
        run: |
          cd tests/integration/templates/cloud-init
          # Replace token and escape the content properly for JSON
          sed "s/UBUNTU_PRO_TOKEN/$UBUNTU_PRO_TOKEN/g" ubuntu-pro-fips.yaml | \
            jq -Rs . | \
            jq -r '{cloud_init: .}' > cloud-init.json
          # Output the JSON content to GITHUB_OUTPUT
          echo "cloud_init=$(cat cloud-init.json | jq -r '.cloud_init' | jq -sR .)" >> $GITHUB_OUTPUT

  test-on-fips:
    name: Integration tests on FIPS machine
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        # Note(ben): FIPS is not yet available for noble.
        os: ["jammy"]
        arch: ["amd64"]
        channel: ["latest/edge"]
    uses: ./.github/workflows/e2e-tests.yaml
    with:
      arch: ${{ matrix.arch }}
      os: ${{ matrix.os }}
      channel: ${{ matrix.channel }}
      test-tags: 'up_to_weekly'
      substrate: 'multipass'
      extra-test-env: 'TEST_MULTIPASS_CLOUD_INIT={{ needs.prepare.outputs.cloud-init }}'
      extra-test-args: '-k test_smoke'
      parallel: false
      tmate_enabled: true

  Mattermost:
    name: Notify Mattermost
    # Notify on success or failure but only if the event is a scheduled run.
    # We don't want to ping people of failed PRs.
    if: ${{ always() && github.event_name == 'schedule' }}
    # Note: Update results check below if you change the "needs" list.
    needs: [test-on-fips]
    runs-on: ubuntu-latest
    steps:
      - name: Set current formatted date as env variable
        run: echo "FORMATTED_DATE=$(date +'%d/%m/%Y')" >> $GITHUB_ENV
      - name: Test results
        run: |
         RESULTS=$(echo '${{ toJson(needs) }}' | jq -c '[.[] | .result]')

         if echo $RESULTS | jq -e 'all(. == "success")'; then
           echo "RESULT=success" >> $GITHUB_ENV
         else
           echo "RESULT=failure" >> $GITHUB_ENV
         fi
      - name: Generate Mattermost Message
        run: |
         if [[ "${{ env.RESULT }}" == "success" ]]; then
           echo "MM_TEXT=:white_check_mark: *Success!* CI completed successfully. [View Run](${{
             github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_ENV
         else
           echo "MM_TEXT=:x: *Failure!* CI failed, @k8s-engineers please fix ASAP. [View Run](${{
             github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_ENV
         fi
      - name: Notify Mattermost
        uses: mattermost/action-mattermost-notify@master
        with:
          MATTERMOST_WEBHOOK_URL: ${{ secrets.MATTERMOST_BOT_WEBHOOK_URL }}
          PAYLOAD: |
            {
             "attachments": [
               {
                 "fallback": "k8s-snap Weekly CI Status",
                 "color": "${{ env.RESULT == 'success' && 'good' || 'danger' }}",
                 "title": "k8s-snap Weekly CI Status - ${{ env.FORMATTED_DATE }}",
                 "text": "${{ env.MM_TEXT }}"
               }
             ]
            }
