name: ðŸ“¦ Publish to edge

on:
  # Run the workflow each time new commits are pushed to the main branch. 
  push:
    branches: [ "main" ]
  # Allow the workflow to be started manually from the Actions tab.
  workflow_dispatch:
  # Allow the workflow to be started by another workflow.
  workflow_call:
    secrets:
      SNAP_STORE_CREDS:
        required: true
      LP_BUILD_SECRET:
        required: true
      SNAPCRAFTERS_BOT_COMMIT:
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Permissions for GITHUB_TOKEN
permissions:
  contents: read
  issues: write

env:
  # Use the name of the repo as the name of the snap
  SNAP_NAME: ${{ github.event.repository.name }}
  # Hardcoded git branch and Snap Store channel channel
  CHANNEL: 'edge'

jobs:
  get_archs:
    name: Compute architectures
    runs-on: ubuntu-latest
    outputs:
      archs: ${{ steps.archs.outputs.archs }}
    steps:
      - name: Checkout the source
        uses: actions/checkout@v4
        with:
          ref: ${{ env.CHANNEL }}

      - name: Compute architectures
        id: archs
        run: |
          # Handle the case where architectures is a simple list of strings
          archs="$(cat snap/snapcraft.yaml | yq -I=0 -o=json '[.architectures[]]')"

          # Handle the case where architectures is a list of objects
          if echo "$archs" | grep -q "build-on"; then
              archs="$(cat snap/snapcraft.yaml | yq -I=0 -o=json '[.architectures[]."build-on"]')"
          fi

          echo "archs=$archs" >> "$GITHUB_OUTPUT"

  build:
    name: "Build & publish"
    environment: "Edge Branch"
    runs-on: ubuntu-latest
    needs: [get_archs]
    strategy:
      matrix:
        # Parse the list of architectures from the output we created above (one job per arch)
        architecture: ${{ fromJSON(needs.get_archs.outputs.archs) }}
    outputs:
      version: ${{ steps.build.outputs.version }}
    steps:
      - name: Checkout the source
        uses: actions/checkout@v4
        with:
          ref: ${{ env.CHANNEL }}

      - name: Setup snapcraft
        env:
          LP_BUILD_SECRET: ${{ secrets.LP_BUILD_SECRET }}
        run: |
          sudo snap install snapcraft --classic

          # Setup Launchpad credentials
          mkdir -p ~/.local/share/snapcraft/provider/launchpad
          echo "$LP_BUILD_SECRET" > ~/.local/share/snapcraft/provider/launchpad/credentials
          git config --global user.email "github-actions@github.com"
          git config --global user.name "Github Actions"

          # Install moreutils so we have access to sponge
          sudo apt-get update; sudo apt-get install -y moreutils

      - name: Remote build the snap
        id: build
        env:
          ARCHITECTURE: ${{ matrix.architecture }}
        run : |
          # Remove the architecture definition from the snapcraft.yaml due to:
          # https://bugs.launchpad.net/snapcraft/+bug/1885150
          cat snap/snapcraft.yaml | yq 'del(.architectures)' | sponge snap/snapcraft.yaml

          snapcraft remote-build --launchpad-accept-public-upload --build-for=${ARCHITECTURE}

          SNAP=$(ls ${{ env.SNAP_NAME }}_*_${ARCHITECTURE}.snap)
          VERSION=${SNAP#"${{ env.SNAP_NAME }}_"} # Strip the name off the front
          VERSION=${VERSION%"_${ARCHITECTURE}"}   # Strip the arch off the back
          echo "snap=${SNAP}" >> "$GITHUB_OUTPUT"
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"

      - name: Review the built snap
        uses: diddlesnaps/snapcraft-review-action@v1
        with:
          snap: ${{ steps.build.outputs.snap }}
          isClassic: 'false'

      - name: Publish the built snap
        id: publish
        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAP_STORE_CREDS }}
          SNAP_FILE: ${{ steps.build.outputs.snap }}
          ARCHITECTURE: ${{ matrix.architecture }}
        run: |
          snapcraft push "$SNAP_FILE" --release="$CHANNEL"

  # Create an issue using the template that asks maintainers to test the snap, and take
  # action to promote the revisions to stable if testing is successful.
  create_issue:
    name: "Create call for testing"
    environment: "Edge Branch"
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the source
        uses: actions/checkout@v4
      
      - name: Setup snapcraft
        run: |
          sudo snap install snapcraft --classic

      - name: Write the arch/rev table
        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAP_STORE_CREDS }}
        id: build
        run: |
          # Build the initial structure for the HTML table including the header row.
          table="<table><thead><tr><th>CPU Architecture</th><th>Revision</th></tr></thead><tbody>"

          # Declare an array to keep track of the revisions we've seen
          revisions=()

          # Iterate over the architectures specified in the snapcraft.yaml
          for arch in $(cat snap/snapcraft.yaml | yq '.architectures[]'); do
              rev="$(snapcraft list-revisions "${{ env.SNAP_NAME }}" --arch "$arch" | grep "latest/edge*" | head -n1 | cut -d' ' -f1)"
              revisions+=("$rev")
              # Add a row to the HTML table
              table="${table}<tr><td>${arch}</td><td>${rev}</td></tr>"
          done

          # Add the closing tags for the table
          table="${table}</tbody></table>"

          # Get a comma separated list of revisions
          printf -v joined '%s,' "${revisions[@]}"

          echo "revisions=${joined%,}" >> "$GITHUB_OUTPUT"
          echo "table=${table}" >> "$GITHUB_OUTPUT"

      - name: Create call for testing issue
        uses: JasonEtco/create-an-issue@v2
        id: comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          revisions: ${{ steps.build.outputs.revisions }}
          table: ${{ steps.build.outputs.table }}
          version: ${{ needs.build.outputs.version }}
        with:
          filename: .github/testing-issue-template.md
    outputs:
      issue_number: ${{ steps.comment.outputs.number }}

  # Deploy the snap inside a desktop VM and grab screenshots of the desktop, and of
  # the application, then post them as a comment on the issue created above.
  grab-screenshots:
    name: Gather screenshots
    environment: "Edge Branch"
    needs: 
      - build
      - create_issue
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Setup LXD
        uses: canonical/setup-lxd@v0.1.1

      - name: Prepare VM
        run: |
          .github/vmctl prepare
          .github/vmctl exec "sudo snap install ${{ env.SNAP_NAME }} --channel latest/edge"
          .github/vmctl exec "snap run ${{ env.SNAP_NAME }} &>/home/ubuntu/${{ env.SNAP_NAME }}.log &"
          sleep 20

      - name: Gather screenshots
        run: |
          .github/vmctl screenshot-full
          .github/vmctl screenshot-window

      - name: Output application logs
        run: |
          .github/vmctl exec "cat /home/ubuntu/${{ env.SNAP_NAME }}.log"

      - name: Checkout snapcrafters/ci-screenshots
        uses: actions/checkout@v4
        with: 
          repository: snapcrafters/ci-screenshots
          path: ci-screenshots
          token: ${{ secrets.SNAPCRAFTERS_BOT_COMMIT }}

      - name: Upload screenshots to snapcrafters/ci-screenshots
        id: screenshots
        run: |
          file_prefix="$(date +%Y%m%d)-${{ env.SNAP_NAME }}-${{ needs.create_issue.outputs.issue_number }}"

          pushd ci-screenshots
          mv ../screenshot-screen.png "${file_prefix}-screen.png"
          mv ../screenshot-window.png "${file_prefix}-window.png"

          git config --global user.email "merlijn.sebrechts+snapcrafters-bot@gmail.com"
          git config --global user.name "Snapcrafters Bot"

          git add -A .
          git commit -m "data: screenshots for snapcrafters/${{ env.SNAP_NAME }}#${{ needs.create_issue.outputs.issue_number }}"
          git push origin main

          echo "screen=https://raw.githubusercontent.com/snapcrafters/ci-screenshots/main/${file_prefix}-screen.png" >> "$GITHUB_OUTPUT"
          echo "window=https://raw.githubusercontent.com/snapcrafters/ci-screenshots/main/${file_prefix}-window.png" >> "$GITHUB_OUTPUT"

      - name: Comment on call for testing issue with screenshots
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ needs.create_issue.outputs.issue_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `The following screenshots were taken during automated testing:

              ![window](${{ steps.screenshots.outputs.window }})

              ![screen](${{ steps.screenshots.outputs.screen }})
              `
            })