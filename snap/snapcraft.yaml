name: k8s
adopt-info: kubernetes-version
summary: Canonical Kubernetes, a CNCF-conformant K8s distribution by Canonical
description: |-
  Canonical Kubernetes is an opinionated and CNCF conformant Kubernetes delivered by snaps.
  Enjoy the simplified, almost zero, operations and enhanced security posture
  on any infrastructure
license: GPL-3.0
grade: stable
confinement: classic
# Note(ben): Snapcraft does not expose its base for part builds, so we need to set it manually.
# Feature request tracked in https://github.com/canonical/snapcraft/issues/5614
# For now, remember to also update OPENSSL_MODULES and etcd part BASE when bumping this version.
base: core22
environment:
  REAL_PATH: $PATH
  REAL_LD_LIBRARY_PATH: $LD_LIBRARY_PATH
  CRAFT_ARCH_TRIPLET_BUILD_FOR: $CRAFT_ARCH_TRIPLET_BUILD_FOR
  # Note(ben): Needs to be changed to /snap/core24/current/usr/lib/x86_64-linux-gnu/ossl-modules/
  # when base is updated to core24 (mind the removed "-3").
  OPENSSL_MODULES: /snap/core22/current/usr/lib/x86_64-linux-gnu/ossl-modules-3/

architectures:
  - build-on: [amd64]
  - build-on: [arm64]

parts:
  build-deps:
    plugin: nil
    build-snaps:
      - go/1.24-fips/stable
    build-attributes: [enable-patchelf]
    build-packages:
      - sudo
      - autoconf
      - automake
      - autopoint
      - autotools-dev
      - bison
      - btrfs-progs
      - libbtrfs-dev
      - build-essential
      - curl
      - flex
      - git
      - libjansson-dev
      - liblz4-dev
      - libnetfilter-conntrack-dev
      - libnetfilter-conntrack3
      - libnfnetlink-dev
      - libseccomp-dev
      - libtool
      - libssl-dev
      - patchelf
      - pkg-config
      - rsync
      - tcl
      - python3-pip

  dqlite:
    after: [build-deps]
    plugin: nil
    source: src/k8s/hack
    build-attributes: [enable-patchelf]
    override-prime: ""
    override-build: |
      DQLITE_STAGING_DIR="${CRAFT_STAGE}/static-dqlite-deps"
      if [ -d "${DQLITE_STAGING_DIR}" ]; then
        rm -rf "${DQLITE_STAGING_DIR}"
      fi
      mkdir "${DQLITE_STAGING_DIR}"
      cp -rv * "${DQLITE_STAGING_DIR}"

      # Build dqlite libraries on the staging area
      "${DQLITE_STAGING_DIR}/static-dqlite.sh"

  k8s-dqlite:
    after: [dqlite]
    plugin: nil
    source: build-scripts/components/k8s-dqlite
    build-attributes: [enable-patchelf]
    override-build: $CRAFT_PROJECT_DIR/build-scripts/build-component.sh k8s-dqlite

  etcd:
    after: [build-deps]
    plugin: nil
    source: build-scripts/components/etcd
    # Note(ben): patchelf messes up the segments when patching etcd
    # due to https://github.com/NixOS/patchelf/issues/446.
    # Instead, we use a custom script based on LIEF to manually patch the rpath and interpreter.
    build-attributes: [no-patchelf]
    override-build: |
      # Note(Ben): This field must match the base field above.
      BASE=core22

      $CRAFT_PROJECT_DIR/build-scripts/build-component.sh etcd

      pip3 install -r $CRAFT_PROJECT_DIR/build-scripts/hack/requirements.txt
      case "$CRAFT_ARCH_TRIPLET_BUILD_FOR" in
        x86_64-linux-gnu)
          python3 $CRAFT_PROJECT_DIR/build-scripts/hack/patchelf.py $CRAFT_PART_INSTALL/bin/etcd \
            --set-rpath /snap/$BASE/current/lib/x86_64-linux-gnu/ \
            --set-interpreter /snap/$BASE/current/lib64/ld-linux-x86-64.so.2
          ;;
        aarch64-linux-gnu)
          python3 $CRAFT_PROJECT_DIR/build-scripts/hack/patchelf.py $CRAFT_PART_INSTALL/bin/etcd \
            --set-rpath /snap/$BASE/current/lib/aarch64-linux-gnu/ \
            --set-interpreter /snap/$BASE/current/lib/ld-linux-aarch64.so.1
          ;;
        *)
          echo "Unknown architecture: $CRAFT_ARCH_TRIPLET_BUILD_FOR"
          exit 1
          ;;
      esac
    stage:
      - bin/etcd

  k8s-binaries:
    after: [dqlite]
    source: src/k8s
    build-attributes: [enable-patchelf]
    plugin: nil
    override-build: |
      INSTALL="${CRAFT_PART_INSTALL}"

      export DQLITE_BUILD_SCRIPTS_DIR="${CRAFT_STAGE}/static-dqlite-deps"
      export CGO_ENABLED=1
      export GOTOOLCHAIN=local
      export GOEXPERIMENT=opensslcrypto

      make dynamic -j

      mkdir -p "${INSTALL}/bin"
      mkdir -p "${INSTALL}/lib"
      for binary in k8s k8sd k8s-apiserver-proxy; do
        cp -P "bin/dynamic/${binary}" "${INSTALL}/bin/${binary}"
      done
      cp -P bin/dynamic/lib/*.so* "${INSTALL}/lib/"

      LD_LIBRARY_PATH="${DQLITE_BUILD_SCRIPTS_DIR}/.deps/dynamic/lib" "${INSTALL}/bin/k8s" list-images > "${INSTALL}/images.txt"

  cni:
    after: [build-deps]
    plugin: nil
    source: build-scripts/components/cni
    build-attributes: [enable-patchelf]
    override-build: $CRAFT_PROJECT_DIR/build-scripts/build-component.sh cni

  kubernetes:
    after: [build-deps]
    plugin: nil
    source: build-scripts
    build-attributes: [enable-patchelf]
    override-build: $CRAFT_PROJECT_DIR/build-scripts/build-component.sh kubernetes

  kubernetes-version:
    plugin: nil
    source: build-scripts/components/kubernetes
    override-build: craftctl set version="$(cat ./version)"

  helm:
    after: [build-deps]
    build-attributes: [enable-patchelf]
    plugin: nil
    source: build-scripts/components/helm
    override-build: $CRAFT_PROJECT_DIR/build-scripts/build-component.sh helm

  libmnl:
    after: [build-deps]
    plugin: autotools
    source: https://www.netfilter.org/pub/libmnl/libmnl-1.0.4.tar.bz2
    build-attributes: [enable-patchelf]
    prime:
      - -usr/local/include

  libnftnl:
    after: [libmnl]
    plugin: autotools
    source: https://www.netfilter.org/projects/libnftnl/files/libnftnl-1.1.8.tar.bz2
    build-attributes: [enable-patchelf]
    build-environment:
      - LIBMNL_LIBS: $CRAFT_STAGE/usr/lib
    prime:
      - -usr/local/include

  iptables:
    after: [libnftnl]
    source: https://www.netfilter.org/projects/iptables/files/iptables-1.8.6.tar.bz2
    plugin: autotools
    build-attributes: [enable-patchelf]
    build-environment:
      - LIBMNL_LIBS: $CRAFT_STAGE/usr/lib
      - LIBNFTNL_LIBS: $CRAFT_STAGE/usr/lib
    autotools-configure-parameters:
      - "--prefix=/usr"
      - "--exec-prefix=/"
      - "--disable-shared"
      - "--enable-static"
    stage:
      - -usr
      - -lib/pkgconfig
      - -bin/iptables-xml

  containerd:
    after: [runc]
    plugin: nil
    build-attributes: [enable-patchelf]
    source: build-scripts/components/containerd
    override-build: $CRAFT_PROJECT_DIR/build-scripts/build-component.sh containerd

  runc:
    after: [iptables, build-deps]
    plugin: nil
    build-attributes: [enable-patchelf]
    source: build-scripts/components/runc
    override-build: $CRAFT_PROJECT_DIR/build-scripts/build-component.sh runc

  bash-utils:
    plugin: nil
    build-attributes: [enable-patchelf]
    stage-packages:
      - conntrack
      - coreutils
      - diffutils
      - ethtool
      - hostname
      - iproute2
      - ipset
      - kmod
      - libatm1
      - libnss-resolve
      - libnss-myhostname
      - libnss-mymachines
      - members
      - nano
      - net-tools
      - openssl
      - procps
      - tar
      - util-linux
    stage:
      - -etc/bash_completion.d
      - -etc/cron.d
      - -etc/depmod.d
      - -etc/ldap
      - -etc/logrotate.d
      - -etc/init.d
      - -etc/perl
      - -etc/rsyslog.d
      - -etc/sudoers.d
      - -lib/systemd
      - -usr/bin/perl*
      - -usr/include
      - -usr/lib/*/*perl*
      - -usr/share

  k8s:
    plugin: nil
    source: k8s
    build-attributes: [enable-patchelf]
    override-build: |
      rm $CRAFT_PART_INSTALL/k8s -rf
      cp --archive --link --no-dereference . $CRAFT_PART_INSTALL/k8s

  bom:
    after:
      - cni
      - containerd
      - helm
      - k8s-dqlite
      - kubernetes
      - runc
    plugin: nil
    source: .
    build-packages:
      - python3-yaml
    override-build: |
      ./build-scripts/generate-bom.py > "${CRAFT_PART_INSTALL}/bom.json"

apps:
  k8s:
    command: k8s/wrappers/commands/k8s
  containerd:
    command: k8s/wrappers/services/containerd
    daemon: notify
    install-mode: disable
    # when stopped send only sigterm
    # https://forum.snapcraft.io/t/process-lifecycle-on-snap-refresh/140/37
    stop-mode: sigterm
    restart-condition: always
    start-timeout: 5m
    before: [kubelet]
  k8s-dqlite:
    command: k8s/wrappers/services/k8s-dqlite
    install-mode: disable
    daemon: simple
    before: [kube-apiserver]
  etcd:
    command: k8s/wrappers/services/etcd
    install-mode: disable
    daemon: simple
    before: [kube-apiserver]
  k8sd:
    command: k8s/wrappers/services/k8sd
    install-mode: enable
    daemon: simple
  kubelet:
    install-mode: disable
    command: k8s/wrappers/services/kubelet
    daemon: simple
    after: [containerd]
  kube-apiserver:
    install-mode: disable
    command: k8s/wrappers/services/kube-apiserver
    daemon: simple
    before: [kubelet, kube-controller-manager, kube-proxy, kube-scheduler]
    stop-timeout: 5s
  kube-controller-manager:
    install-mode: disable
    command: k8s/wrappers/services/kube-controller-manager
    daemon: simple
    after: [kube-apiserver]
  kube-proxy:
    install-mode: disable
    command: k8s/wrappers/services/kube-proxy
    daemon: simple
    after: [kube-apiserver]
  kube-scheduler:
    install-mode: disable
    command: k8s/wrappers/services/kube-scheduler
    daemon: simple
    after: [kube-apiserver]
  k8s-apiserver-proxy:
    install-mode: disable
    command: k8s/wrappers/services/k8s-apiserver-proxy
    daemon: simple
    before: [kubelet, kube-proxy]
