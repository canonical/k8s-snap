name: k8s
adopt-info: kubernetes-version
summary: Canonical Kubernetes, a CNCF-conformant K8s distribution by Canonical
description: |-
  Canonical Kubernetes is an opinionated and CNCF conformant Kubernetes delivered by snaps.
  Enjoy the simplified, almost zero, operations and enhanced security posture
  on any infrastructure
license: GPL-3.0
grade: stable
confinement: strict
base: core20
environment:
  REAL_PATH: $PATH
  REAL_LD_LIBRARY_PATH: $LD_LIBRARY_PATH
  SNAPCRAFT_ARCH_TRIPLET: $SNAPCRAFT_ARCH_TRIPLET

architectures:
  - build-on: [amd64]
  - build-on: [arm64]

parts:
  build-deps:
    plugin: nil
    build-snaps:
      - go/1.22/stable
    build-packages:
      - autoconf
      - automake
      - autopoint
      - autotools-dev
      - bison
      - btrfs-progs
      - libbtrfs-dev
      - build-essential
      - curl
      - flex
      - git
      - libjansson-dev
      - liblz4-dev
      - libnetfilter-conntrack-dev
      - libnetfilter-conntrack3
      - libnfnetlink-dev
      - libseccomp-dev
      - libtool
      - pkg-config
      - rsync
      - tcl

  dqlite:
    after: [build-deps]
    plugin: nil
    source: src/k8s/hack
    override-prime: ""
    override-build: |
      DQLITE_STAGING_DIR="${SNAPCRAFT_STAGE}/static-dqlite-deps"
      if [ -d "${DQLITE_STAGING_DIR}" ]; then
        rm -rf "${DQLITE_STAGING_DIR}"
      fi
      mkdir "${DQLITE_STAGING_DIR}"
      cp -rv * "${DQLITE_STAGING_DIR}"

      # Build dqlite libraries on the staging area
      "${DQLITE_STAGING_DIR}/static-dqlite.sh"

  k8s-dqlite:
    after: [dqlite]
    plugin: nil
    source: build-scripts/components/k8s-dqlite
    override-build: $SNAPCRAFT_PROJECT_DIR/build-scripts/build-component.sh k8s-dqlite

  k8s-binaries:
    after: [dqlite]
    source: src/k8s
    plugin: nil
    override-build: |
      INSTALL="${SNAPCRAFT_PART_INSTALL}"

      export DQLITE_BUILD_SCRIPTS_DIR="${SNAPCRAFT_STAGE}/static-dqlite-deps"
      make static -j

      mkdir -p "${INSTALL}/bin"
      for binary in k8s k8sd k8s-apiserver-proxy; do
        cp -P "bin/static/${binary}" "${INSTALL}/bin/${binary}"
      done
      ./bin/static/k8s list-images > "${INSTALL}/images.txt"

  cni:
    after: [build-deps]
    plugin: nil
    source: build-scripts/components/cni
    override-build: $SNAPCRAFT_PROJECT_DIR/build-scripts/build-component.sh cni

  kubernetes:
    after: [build-deps]
    plugin: nil
    source: build-scripts
    override-build: $SNAPCRAFT_PROJECT_DIR/build-scripts/build-component.sh kubernetes

  kubernetes-version:
    plugin: nil
    source: build-scripts/components/kubernetes
    override-build: snapcraftctl set-version "$(cat ./version)"

  helm:
    after: [build-deps]
    build-attributes: [no-patchelf]
    plugin: nil
    source: build-scripts/components/helm
    override-build: $SNAPCRAFT_PROJECT_DIR/build-scripts/build-component.sh helm

  libmnl:
    after: [build-deps]
    plugin: autotools
    source: https://www.netfilter.org/pub/libmnl/libmnl-1.0.4.tar.bz2
    prime:
      - -usr/local/include

  libnftnl:
    after: [libmnl]
    plugin: autotools
    source: https://www.netfilter.org/projects/libnftnl/files/libnftnl-1.1.8.tar.bz2
    build-environment:
      - LIBMNL_LIBS: $SNAPCRAFT_STAGE/usr/lib
    prime:
      - -usr/local/include

  iptables:
    after: [libnftnl]
    source: https://www.netfilter.org/projects/iptables/files/iptables-1.8.6.tar.bz2
    plugin: autotools
    build-environment:
      - LIBMNL_LIBS: $SNAPCRAFT_STAGE/usr/lib
      - LIBNFTNL_LIBS: $SNAPCRAFT_STAGE/usr/lib
    autotools-configure-parameters:
      - "--prefix=/usr"
      - "--exec-prefix=/"
      - "--disable-shared"
      - "--enable-static"
    stage:
      - -usr
      - -lib/pkgconfig
      - -bin/iptables-xml

  containerd:
    after: [runc]
    plugin: nil
    build-attributes: [no-patchelf]
    source: build-scripts/components/containerd
    override-build: $SNAPCRAFT_PROJECT_DIR/build-scripts/build-component.sh containerd

  runc:
    after: [iptables, build-deps]
    plugin: nil
    build-attributes: [no-patchelf]
    source: build-scripts/components/runc
    override-build: $SNAPCRAFT_PROJECT_DIR/build-scripts/build-component.sh runc

  bash-utils:
    plugin: nil
    stage-packages:
      - conntrack
      - coreutils
      - diffutils
      - ethtool
      - hostname
      - iproute2
      - kmod
      - libatm1
      - libnss-resolve
      - libnss-myhostname
      - libnss-mymachines
      - members
      - nano
      - net-tools
      - openssl
      - procps
      - tar
      - util-linux
    stage:
      - -etc/bash_completion.d
      - -etc/cron.d
      - -etc/depmod.d
      - -etc/ldap
      - -etc/logrotate.d
      - -etc/init.d
      - -etc/perl
      - -etc/rsyslog.d
      - -etc/sudoers.d
      - -lib/systemd
      - -usr/bin/perl*
      - -usr/include
      - -usr/lib/*/*perl*
      - -usr/share

  k8s:
    plugin: nil
    source: k8s
    override-build: |
      rm $SNAPCRAFT_PART_INSTALL/k8s -rf
      cp --archive --link --no-dereference . $SNAPCRAFT_PART_INSTALL/k8s

  bom:
    after:
      - cni
      - containerd
      - helm
      - k8s-dqlite
      - kubernetes
      - runc
    plugin: nil
    source: .
    build-packages:
      - python3-yaml
    override-build: |
      ./build-scripts/generate-bom.py > "${SNAPCRAFT_PART_INSTALL}/bom.json"

apps:
  k8s:
    command: k8s/wrappers/commands/k8s
    plugs:
      - firewall-control
      - home-read-all
      - home
      - kernel-module-observe
      - kubernetes-support
      - login-session-observe
      - log-observe
      - mount-observe
      - network
      - network-control
      - network-observe
      - opengl
      - system-observe
  containerd:
    command: k8s/wrappers/services/containerd
    daemon: notify
    install-mode: disable
    # when stopped send only sigterm
    # https://forum.snapcraft.io/t/process-lifecycle-on-snap-refresh/140/37
    stop-mode: sigterm
    restart-condition: always
    start-timeout: 5m
    before: [kubelet]
    plugs:
      - network-bind
      - docker-privileged
      - firewall-control
      - network-control
      - mount-observe
      - kubernetes-support
      - cilium-module-load
      - opengl
      - cifs-mount
      - fuse-support
      - kernel-crypto-api
  k8s-dqlite:
    command: k8s/wrappers/services/k8s-dqlite
    install-mode: disable
    daemon: simple
    before: [kube-apiserver]
    plugs:
      - network-bind
  k8sd:
    command: k8s/wrappers/services/k8sd
    install-mode: enable
    daemon: simple
    # FIXME: we keep 'kubernetes-support' because 'mount-observe' is not sufficient for some reason, investigate
    plugs:
      - network
      - network-bind
      - mount-observe
      - kubernetes-support
  kubelet:
    install-mode: disable
    command: k8s/wrappers/services/kubelet
    daemon: simple
    after: [containerd]
    plugs:
      - docker-privileged
      - firewall-control
      - hardware-observe
      - kubernetes-support
      - mount-observe
      - network-bind
      - network-observe
      - network-control
      - process-control
      - system-observe
      - opengl
      - kernel-module-observe
  kube-apiserver:
    install-mode: disable
    command: k8s/wrappers/services/kube-apiserver
    daemon: simple
    before: [kubelet, kube-controller-manager, kube-proxy, kube-scheduler]
    stop-timeout: 5s
    plugs:
      - docker-privileged
      - firewall-control
      - hardware-observe
      - kubernetes-support
      - mount-observe
      - network-bind
      - network-observe
      - network-control
      - process-control
      - system-observe
      - opengl
      - kernel-module-observe
  kube-controller-manager:
    install-mode: disable
    command: k8s/wrappers/services/kube-controller-manager
    daemon: simple
    after: [kube-apiserver]
    plugs:
      - docker-privileged
      - firewall-control
      - hardware-observe
      - kubernetes-support
      - mount-observe
      - network-bind
      - network-observe
      - network-control
      - process-control
      - system-observe
      - opengl
      - kernel-module-observe
  kube-proxy:
    install-mode: disable
    command: k8s/wrappers/services/kube-proxy
    daemon: simple
    after: [kube-apiserver]
    plugs:
      - docker-privileged
      - firewall-control
      - hardware-observe
      - kubernetes-support
      - mount-observe
      - network-bind
      - network-observe
      - network-control
      - process-control
      - system-observe
      - opengl
      - kernel-module-observe
  kube-scheduler:
    install-mode: disable
    command: k8s/wrappers/services/kube-scheduler
    daemon: simple
    after: [kube-apiserver]
    plugs:
      - docker-privileged
      - firewall-control
      - hardware-observe
      - kubernetes-support
      - mount-observe
      - network-bind
      - network-observe
      - network-control
      - process-control
      - system-observe
      - opengl
      - kernel-module-observe
  k8s-apiserver-proxy:
    install-mode: disable
    command: k8s/wrappers/services/k8s-apiserver-proxy
    daemon: simple
    before: [kubelet, kube-proxy]
    plugs:
      - network-bind

layout:
  # Kubernetes paths
  /etc/kubernetes:
    bind: $SNAP_COMMON/etc/kubernetes
  /etc/cni/net.d:
    bind: $SNAP_COMMON/etc/cni/net.d
  /opt/cni/bin:
    bind: $SNAP_COMMON/opt/cni/bin
  /var/lib/kubelet:
    bind: $SNAP_COMMON/var/lib/kubelet
  # Logs and temporary files
  /var/log/pods:
    bind: $SNAP_COMMON/var/log/pods
  /var/log/containers:
    bind: $SNAP_COMMON/var/log/containers
  # CNI
  /var/lib/cni:
    bind: $SNAP_COMMON/var/lib/cni
  /var/lib/calico:
    bind: $SNAP_COMMON/var/lib/calico
  # Extras
  /usr/local:
    bind: $SNAP_COMMON/usr/local
  # TBD (maybe not required)
  /usr/libexec:
    bind: $SNAP_COMMON/usr/libexec
  /var/lib/kube-proxy:
    bind: $SNAP_COMMON/var/lib/kube-proxy
  /etc/service/enabled:
    bind: $SNAP_COMMON/etc/service/enabled
  /etc/nanorc:
    bind-file: $SNAP_COMMON/etc/nanorc

plugs:
  home-read-all:
    interface: home
    read: all
  docker-privileged:
    interface: docker-support
    privileged-containers: true
  docker-unprivileged:
    interface: docker-support
    privileged-containers: false
  # Cilium Ingress requires and loads iptable_raw and xt_socket modules
  # If these modules are not loaded, ingress responses return 503 Service Unavailable
  # since datapath L7 redirection does not work correctly.
  # https://github.com/cilium/cilium/blob/1ab043d546e52fb2428300e6c6ea35fa3bd7c711/install/kubernetes/cilium/values.yaml#L792-L796
  # https://github.com/cilium/cilium/issues/25021#issuecomment-1699969830
  cilium-module-load:
    interface: kernel-module-load
    modules:
    - name: iptable_raw
      load: "on-boot"
    - name: xt_socket
      load: "on-boot"

hooks:
  remove:
    plugs:
      - network
      - network-bind
      - process-control
      - network-control
      - firewall-control
