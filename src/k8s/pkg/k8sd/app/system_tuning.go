package app

import (
	"context"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"regexp"

	"github.com/canonical/k8s/pkg/log"
	"github.com/canonical/k8s/pkg/utils"
	"github.com/canonical/microcluster/v2/state"
)

const systemConfigPath = "/etc/sysctl.d/"

var (
	minConfig = map[string]string{
		"fs.inotify.max_user_instances": "1024",
		"fs.inotify.max_user_watches":   "1048576",
	}
	confLocs = []string{
		"/etc/sysctl.d/", "/run/sysctl.d/", "/usr/local/lib/sysctl.d/", "/usr/lib/sysctl.d/", "/lib/sysctl.d/", "/etc/sysctl.conf",
	}
	re = regexp.MustCompile(`^(\d+)-k8s.conf$`)
)

func (a *App) createSystemTuningConfigFile(ctx context.Context) error {
	log := log.FromContext(ctx).WithValues("hook", "bootstrap")
	// Check if tuning file already exists
	// Match patterns like: 10-k8s.conf
	re := regexp.MustCompile(`^(\d+)-k8s.conf$`)
	confPath, err := utils.GetFileMatch(systemConfigPath, re)
	if err != nil {
		log.Error(err, "Failed to check for existing system tuning file")
		return err
	}
	if confPath != "" {
		return nil
	}

	// Find highest order file
	// Match patterns like: 10-xyz.conf
	maxOrder, err := utils.GetHighestConfigFileOrder(systemConfigPath)
	if err != nil {
		return err
	}

	f, err := os.Create(filepath.Join(systemConfigPath, fmt.Sprintf("%d-k8s.conf", maxOrder+1)))
	if err != nil {
		return err
	}
	defer f.Close()

	_, err = f.WriteString("# Auto-generated by the k8s snap for system tuning.\n# Delete this file to disable auto-tuning.\n# Overrides defaults via 'sysctl --system' on k8sd service start.\n")
	if err != nil {
		return err
	}
	return nil
}

// tuneSystemSettings bumps system parameters if the configuration file exists.
// This ensures system settings reflect minimum k8s requirements.
func (a *App) tuneSystemSettings(ctx context.Context, s state.State) error {
	log := log.FromContext(ctx).WithValues("startup", "tuneSystem")

	// Find highest order file
	// Match patterns like: 10-k8s.conf
	confPath, err := utils.GetFileMatch(systemConfigPath, re)
	if err != nil {
		log.Error(err, "failed to get file match on system config file *-k8s.conf")
	}

	// skip tuning if the tuning file does not exist
	if confPath == "" {
		log.Info(fmt.Sprintf("skipping system tuning: no sysctl config file %s", confPath))
		return nil
	}

	// parse config files to check minimum requirements are set
	newConfig := utils.MinConfigFileDiff(confLocs, minConfig)
	if len(newConfig) == 0 {
		return nil
	}
	// Update the x-k8s.conf file to ensure minimum k8s requirements
	if err := utils.UpdateConfigFile(confPath, newConfig); err != nil {
		log.Error(err, fmt.Sprintf("failed to update system configuration file %s", confPath))
	}

	if err := exec.CommandContext(ctx, "sysctl", "--system").Run(); err != nil {
		return fmt.Errorf("failed to apply system parameters: %w", err)
	}
	return nil
}
