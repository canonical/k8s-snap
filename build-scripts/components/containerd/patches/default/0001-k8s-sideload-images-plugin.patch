From 44e89c3a571a55aedcd6c8b5cb19dd5fbe81f5f8 Mon Sep 17 00:00:00 2001
From: Angelos Kolaitis <angelos.kolaitis@canonical.com>
Date: Thu, 16 Nov 2023 17:50:09 +0200
Subject: [PATCH] k8s sideload images plugin

---
 cmd/containerd/builtins_k8s.go |   6 ++
 k8s_plugins/sideload.go        | 132 +++++++++++++++++++++++++++++++++
 2 files changed, 138 insertions(+)
 create mode 100644 cmd/containerd/builtins_k8s.go
 create mode 100644 k8s_plugins/sideload.go

diff --git a/cmd/containerd/builtins_k8s.go b/cmd/containerd/builtins_k8s.go
new file mode 100644
index 000000000..cf1d63aeb
--- /dev/null
+++ b/cmd/containerd/builtins_k8s.go
@@ -0,0 +1,6 @@
+package main
+
+// register containerd k8s plugins here
+import (
+	_ "github.com/containerd/containerd/k8s_plugins"
+)
diff --git a/k8s_plugins/sideload.go b/k8s_plugins/sideload.go
new file mode 100644
index 000000000..3f9fb35da
--- /dev/null
+++ b/k8s_plugins/sideload.go
@@ -0,0 +1,132 @@
+package k8s_plugins
+
+import (
+	"fmt"
+	"os"
+	"path/filepath"
+	"time"
+
+	"github.com/containerd/containerd"
+	"github.com/containerd/containerd/log"
+	"github.com/containerd/containerd/platforms"
+	"github.com/containerd/containerd/plugin"
+)
+
+const pluginName = "sideload-images"
+
+var logger = log.L.WithField("plugin", pluginName)
+
+type Config struct {
+	// Interval configures how frequently the plugin will look for new images found
+	// in the sources. If set to zero, images are only loaded during initial start.
+	Interval *time.Duration `toml:"interval"`
+
+	// Sources is a list of paths to look for .tar images.
+	// For example, `/var/snap/k8s/common/sideload`
+	Sources []string `toml:"sources"`
+
+	// Namespace the images will be loaded into, e.g. "k8s.io"
+	Namespace string `toml:"namespace"`
+}
+
+func (c *Config) SetDefaults() {
+	if c.Namespace == "" {
+		c.Namespace = "k8s.io"
+	}
+	if len(c.Sources) == 0 {
+		snapCommon := os.Getenv("SNAP_COMMON")
+		if snapCommon == "" {
+			snapCommon = "/var/snap/k8s/common"
+		}
+		c.Sources = []string{filepath.Join(snapCommon, "sideload")}
+	}
+	if c.Interval == nil {
+		t := 5 * time.Second
+		c.Interval = &t
+	}
+}
+
+func init() {
+	c := &Config{}
+	plugin.Register(&plugin.Registration{
+		Type:   plugin.ServicePlugin,
+		ID:     pluginName,
+		Config: c,
+		InitFn: func(ic *plugin.InitContext) (interface{}, error) {
+			config := ic.Config.(*Config)
+			config.SetDefaults()
+
+			logger.Debugf("Loaded config %#v", config)
+
+			if len(config.Sources) == 0 {
+				return nil, fmt.Errorf("no sources configured: %w", plugin.ErrSkipPlugin)
+			}
+
+			go func() {
+				// get a containerd client
+				var (
+					cl  *containerd.Client
+					err error
+				)
+				for cl == nil {
+					select {
+					case <-ic.Context.Done():
+						return
+					default:
+					}
+
+					cl, err = containerd.New(ic.Address, containerd.WithDefaultNamespace(config.Namespace), containerd.WithTimeout(2*time.Second))
+					if err != nil {
+						logger.Info("Failed to create containerd client")
+					}
+				}
+
+				for {
+				nextDir:
+					for _, dir := range c.Sources {
+						logger := logger.WithField("dir", dir)
+						logger.Debug("Looking for images")
+						files, err := filepath.Glob(filepath.Join(dir, "*.tar"))
+						if err != nil {
+							logger.WithError(err).Warn("Failed to look for images")
+							continue nextDir
+						}
+
+					nextFile:
+						for _, file := range files {
+							logger := logger.WithField("file", file)
+							r, err := os.Open(file)
+							if err != nil {
+								logger.WithError(err).Warn("Failed to open file")
+								continue nextFile
+							}
+							images, err := cl.Import(ic.Context, r, containerd.WithImportPlatform(platforms.Default()))
+							if err != nil {
+								logger.WithError(err).Error("Failed to import images")
+							} else {
+								logger.Infof("Imported %d images", len(images))
+								os.Rename(file, file+".loaded")
+							}
+							if closeErr := r.Close(); closeErr != nil {
+								logger.WithError(closeErr).Error("Failed to close reader")
+							}
+						}
+					}
+
+					// retry after interval, finish if interval is zero
+					if *c.Interval == 0 {
+						logger.Info("Plugin terminating")
+						return
+					}
+					select {
+					case <-ic.Context.Done():
+						return
+					case <-time.After(*c.Interval):
+					}
+				}
+			}()
+
+			return nil, nil
+		},
+	})
+}
--
2.34.1
